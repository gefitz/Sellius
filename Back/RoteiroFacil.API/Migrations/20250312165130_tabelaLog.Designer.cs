// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RoteiroFacil.API.Context;

#nullable disable

namespace RoteiroFacil.API.Migrations
{
    [DbContext(typeof(RoteiroFacilContext))]
    [Migration("20250312165130_tabelaLog")]
    partial class tabelaLog
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("RoteiroFacil.API.Models.CidadeModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("EstadoId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("EstadoId");

                    b.ToTable("Cidades");
                });

            modelBuilder.Entity("RoteiroFacil.API.Models.ClienteModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CidadeId")
                        .HasColumnType("int");

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("RepresetanteId")
                        .HasColumnType("int");

                    b.Property<int?>("RoteiroId")
                        .HasColumnType("int");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("dthAlteracao")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("dthCriacao")
                        .HasColumnType("datetime(6)");

                    b.Property<short>("fAtivo")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("CidadeId");

                    b.HasIndex("RepresetanteId");

                    b.HasIndex("RoteiroId");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("RoteiroFacil.API.Models.EstadoModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("id");

                    b.ToTable("Estados");
                });

            modelBuilder.Entity("RoteiroFacil.API.Models.LicencaModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<Guid>("Licenca")
                        .HasColumnType("char(36)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<DateTime>("dthVencimentoLicenca")
                        .HasColumnType("datetime(6)");

                    b.Property<short>("fAtivo")
                        .HasColumnType("smallint");

                    b.HasKey("id");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("Licencas");
                });

            modelBuilder.Entity("RoteiroFacil.API.Models.LogModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClassErro")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("InnerException")
                        .HasColumnType("longtext");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("dthErro")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("RoteiroFacil.API.Models.PedidoProdutoModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("PedidoId")
                        .HasColumnType("int");

                    b.Property<int>("ProdutoId")
                        .HasColumnType("int");

                    b.Property<float>("ValorVenda")
                        .HasColumnType("float");

                    b.Property<int>("qtd")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("PedidoId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("PedidoProdutos");
                });

            modelBuilder.Entity("RoteiroFacil.API.Models.PedidosModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DthPedido")
                        .HasColumnType("datetime(6)");

                    b.HasKey("id");

                    b.HasIndex("ClienteId");

                    b.ToTable("Pedidos");
                });

            modelBuilder.Entity("RoteiroFacil.API.Models.ProdutoModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<short>("fAtivo")
                        .HasColumnType("smallint");

                    b.Property<float>("preco")
                        .HasColumnType("float");

                    b.Property<int>("qtd")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("Produtos");
                });

            modelBuilder.Entity("RoteiroFacil.API.Models.RepresetanteModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<float>("MetaVendas")
                        .HasColumnType("float");

                    b.Property<float>("TotalVendido")
                        .HasColumnType("float");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int");

                    b.Property<int>("qtdVendida")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("Represetantes");
                });

            modelBuilder.Entity("RoteiroFacil.API.Models.RoteiroModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("CidadeId")
                        .HasColumnType("int");

                    b.Property<int>("RepresetanteId")
                        .HasColumnType("int");

                    b.Property<int?>("RepresetanteModelid")
                        .HasColumnType("int");

                    b.Property<DateTime>("dthRoteiro")
                        .HasColumnType("datetime(6)");

                    b.Property<short>("fAtivo")
                        .HasColumnType("smallint");

                    b.HasKey("id");

                    b.HasIndex("CidadeId");

                    b.HasIndex("RepresetanteId");

                    b.HasIndex("RepresetanteModelid");

                    b.ToTable("Roteiros");
                });

            modelBuilder.Entity("RoteiroFacil.API.Models.UsuarioModel", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<byte[]>("Hash")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<byte[]>("Salta")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("dthCriacaoConta")
                        .HasColumnType("datetime(6)");

                    b.HasKey("id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("RoteiroFacil.API.Models.CidadeModel", b =>
                {
                    b.HasOne("RoteiroFacil.API.Models.EstadoModel", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estado");
                });

            modelBuilder.Entity("RoteiroFacil.API.Models.ClienteModel", b =>
                {
                    b.HasOne("RoteiroFacil.API.Models.CidadeModel", "Cidade")
                        .WithMany()
                        .HasForeignKey("CidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoteiroFacil.API.Models.RepresetanteModel", "Represetante")
                        .WithMany("Clientes")
                        .HasForeignKey("RepresetanteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoteiroFacil.API.Models.RoteiroModel", "Roteiro")
                        .WithMany("Cliente")
                        .HasForeignKey("RoteiroId");

                    b.Navigation("Cidade");

                    b.Navigation("Represetante");

                    b.Navigation("Roteiro");
                });

            modelBuilder.Entity("RoteiroFacil.API.Models.LicencaModel", b =>
                {
                    b.HasOne("RoteiroFacil.API.Models.UsuarioModel", "Usuario")
                        .WithOne("Licenca")
                        .HasForeignKey("RoteiroFacil.API.Models.LicencaModel", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("RoteiroFacil.API.Models.PedidoProdutoModel", b =>
                {
                    b.HasOne("RoteiroFacil.API.Models.PedidosModel", "Pedido")
                        .WithMany("PedidoProdutos")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoteiroFacil.API.Models.ProdutoModel", "Produto")
                        .WithMany("PedidoProdutos")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pedido");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("RoteiroFacil.API.Models.PedidosModel", b =>
                {
                    b.HasOne("RoteiroFacil.API.Models.ClienteModel", "Cliente")
                        .WithMany("Pedidos")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("RoteiroFacil.API.Models.RepresetanteModel", b =>
                {
                    b.HasOne("RoteiroFacil.API.Models.UsuarioModel", "Usuario")
                        .WithOne("Represetante")
                        .HasForeignKey("RoteiroFacil.API.Models.RepresetanteModel", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("RoteiroFacil.API.Models.RoteiroModel", b =>
                {
                    b.HasOne("RoteiroFacil.API.Models.CidadeModel", "Cidade")
                        .WithMany()
                        .HasForeignKey("CidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoteiroFacil.API.Models.RepresetanteModel", "Represetante")
                        .WithMany()
                        .HasForeignKey("RepresetanteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RoteiroFacil.API.Models.RepresetanteModel", null)
                        .WithMany("Roteiros")
                        .HasForeignKey("RepresetanteModelid");

                    b.Navigation("Cidade");

                    b.Navigation("Represetante");
                });

            modelBuilder.Entity("RoteiroFacil.API.Models.ClienteModel", b =>
                {
                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("RoteiroFacil.API.Models.PedidosModel", b =>
                {
                    b.Navigation("PedidoProdutos");
                });

            modelBuilder.Entity("RoteiroFacil.API.Models.ProdutoModel", b =>
                {
                    b.Navigation("PedidoProdutos");
                });

            modelBuilder.Entity("RoteiroFacil.API.Models.RepresetanteModel", b =>
                {
                    b.Navigation("Clientes");

                    b.Navigation("Roteiros");
                });

            modelBuilder.Entity("RoteiroFacil.API.Models.RoteiroModel", b =>
                {
                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("RoteiroFacil.API.Models.UsuarioModel", b =>
                {
                    b.Navigation("Licenca")
                        .IsRequired();

                    b.Navigation("Represetante")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
